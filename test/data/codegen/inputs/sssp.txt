N int

P int

edges int[Dense[N]][SparseList[N]]

weights float[Dense[N]][SparseList[N]]

source int

Let Init(source int) -> (dist float[N], priorityQ int[P][SparseList[N]])
    dist[j] = (j != source) * P
    priorityQ[p][j] = (p == 1 && j == source) + (p == P && j != source)
End

Let UpdateEdges(dist float[N], priorityQ int[P][SparseList[N]], priority int, temp_in int[N]) -> (new_dist float[N], new_priorityQ int[P][SparseList[N]], new_priority int, temp_out int[N])
    temp_out[j] = edges[j][k] * priorityQ[priority][k] * (weights[j][k] + dist[k]) + (edges[j][k] * priorityQ[priority][k] == 0) * P | k:(MIN, 2000000000)
    new_dist[j] = MIN(temp_out[j], dist[j])
    new_priorityQ[j][k] = (dist[k] > new_dist[k]) * (j <= new_dist[k] &&  new_dist[k] < j + 1) + (dist[k] == new_dist[k] && j != priority) * priorityQ[j][k]
	new_priority = priority
End

Let SSSP_one_priority_lvl(dist float[N], priorityQ int[P][SparseList[N]], priority int, temp_in int[N]) -> (new_dist float[N], new_priorityQ int[P][SparseList[N]], new_priority int, temp_out int[N])
	new_dist, new_priorityQ, _, temp_out = UpdateEdges*(dist, priorityQ, priority, temp_in) | (#2[#3] == 0)
    new_priority = priority + 1
End

Let Main() -> (new_dist float[N], dist float[N], priorityQ int[P][SparseList[N]], temp int[N])
	dist, priorityQ = Init(source)
	temp[i] = 0
	new_dist, _, _ = SSSP_one_priority_lvl*(dist, priorityQ, 1, temp) | (#2 == 0 || #3 == (P+1))
End
